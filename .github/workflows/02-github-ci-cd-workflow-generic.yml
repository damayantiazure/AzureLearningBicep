name: 02 CI CD Generic Workflow

on:
#  doc on reusing wfs: https://docs.github.com/en/actions/using-workflows/reusing-workflows
  workflow_call:
    inputs:
      environment_type:
        description: 'env type: development or production'
        required: true
        type: string
        default: development
      environment:
        required: true
        type: string
      location:
        required: true
        type: string
      location_suffix:
        required: true
        type: string
    outputs:
      webAppUrl:
        value: ${{ jobs.build.outputs.webAppUrl }}

  workflow_dispatch:
    inputs:
      environment_type:
        description: 'env type: development or production'
        required: true
        type: string
        default: development
      environment:
        description: 'env name. ex.: dev1 or prod'
        required: true
        type: string
        default: dev1
      location:
        description: 'location - ex.: westeurope'
        required: true
        type: string
        default: westeurope
      location_suffix:
        description: 'location suffix - ex.: we'
        required: true
        type: string
        default: we
  # workflow_dispatch:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

env:
  rgName: rg-tododockerwebapp-${{ inputs.environment }}-${{ inputs.location_suffix }}

jobs:
  build:

    runs-on: ubuntu-latest

    environment:
      name: ${{ inputs.environment_type }}
      url: ${{ steps.deploy-web-app.outputs.webapp-url }}
    steps:
    - uses: actions/checkout@main
    
    - name: Log in with Azure
      uses: Azure/login@v1
      with:
        # CLIENT_ID = Client ID of Service Principal
        # CLIENT_SECRET = Password created for this specific connection - this can further enhanced
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

    - name: Create Resource Group
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}
          az group create --name $rgName --location ${{ inputs.location }}

    # Good documentation on getting output variables: https://github.com/Azure/arm-deploy#another-example-on-how-to-use-this-action-to-get-the-output-of-arm-template
    - name: Deploy Azure Infra
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.rgName }}
        template: ./02-AspNetCore_Docker_Github/infra-as-code.bicep
        parameters: 'location=${{ inputs.location }} location_suffix=${{ inputs.location_suffix }} environment=${{ inputs.environment }}'
        failOnStdErr: false
        
#     - run: echo ${{ steps.deploy.outputs.acrLoginServer }}
    
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ steps.deploy.outputs.acrLoginServer }}
        username: ${{ secrets.CLIENT_ID }}
        password: ${{ secrets.CLIENT_SECRET }}
        
    - name: Build docker image
      run: |
        cd 02-AspNetCore_Docker_Github
        docker build . -t ${{ steps.deploy.outputs.acrLoginServer }}/learning/tododockerwebapp:${{ github.sha }}
        
    # - name: Scan docker image
    #   uses: Azure/container-scan@v0
    #   with:
    #     image-name: ${{ steps.deploy.outputs.acrLoginServer }}/learning/tododockerwebapp:${{ github.sha }}
    #     severity-threshold: CRITICAL
    #     run-quality-checks: true
    
    - name: Push image
      run: docker push ${{ steps.deploy.outputs.acrLoginServer }}/learning/tododockerwebapp:${{ github.sha }}

    - name: Deploy Webapp to ${{ steps.deploy.outputs.webAppName }}
      id: deploy-web-app
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ steps.deploy.outputs.webAppName }}
        images: ${{ steps.deploy.outputs.acrLoginServer }}/learning/tododockerwebapp:${{ github.sha }}
    
    - name: Azure logout
      run: |
        az logout