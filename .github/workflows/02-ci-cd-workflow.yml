name: 02 CI CD Workflow

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  rgName: rg-tododockerwebapp-dev-we
  location: westeurope
  location_suffix: we
  environment: dev

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@main
    
    - name: Log in with Azure
      uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

    - name: Create Resource Group
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}
          az group create --name $rgName --location $location

    # Good documentation on getting output variables: https://github.com/Azure/arm-deploy#another-example-on-how-to-use-this-action-to-get-the-output-of-arm-template
    - name: Deploy Azure Infra
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.rgName }}
        template: ./02-AspNetCore_Docker_Github/infra-as-code.bicep
        parameters: 'location=${{ env.location }} location_suffix=${{ env.location_suffix }} environment=${{ env.environment }}'
        failOnStdErr: false
        
#     - run: echo ${{ steps.deploy.outputs.acrLoginServer }}
    
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ steps.deploy.outputs.acrLoginServer }}
        username: ${{ secrets.CLIENT_ID }}
        password: ${{ secrets.CLIENT_SECRET }}
        
    - name: Build docker image
      run: |
        cd 02-AspNetCore_Docker_Github
        docker build . -t ${{ steps.deploy.outputs.acrLoginServer }}/learning/tododockerwebapp:${{ github.sha }}
        
    - name: Scan docker image
      uses: Azure/container-scan@v0
      with:
        image-name: ${{ steps.deploy.outputs.acrLoginServer }}/learning/tododockerwebapp:${{ github.sha }}
        severity-threshold: CRITICAL
        run-quality-checks: true
    
    - name: Push image
      run: docker push ${{ steps.deploy.outputs.acrLoginServer }}/learning/tododockerwebapp:${{ github.sha }}
